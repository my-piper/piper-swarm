---

x-piper: &piper
  image: ghcr.io/my-piper/piper:${PIPER_IMAGE_TAG}
  env_file:
    - ../config/piper.env

x-worker: &worker
  <<: *piper
  networks:
    - monitoring
    - database
    - services
  deploy:
    placement:
      constraints:
        - "node.labels.app==piper-backend"
    resources:
      limits:
        memory: 4g
      reservations:
        memory: 250m
    replicas: 8
    update_config:
      parallelism: 1
      delay: 5s
      order: start-first

networks:
  backend:
    driver: overlay
  database:
    driver: overlay

services:
  backend:
    <<: *piper
    networks:
      - monitoring
      - database
      - ingress
    healthcheck:
      test: curl --fail http://localhost/health || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    command: ["server"]
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.entrypoints=http"
        - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`)"
        - "traefik.http.services.backend.loadbalancer.server.port=80"
        - "traefik.docker.network=piper_ingress"
      resources:
        reservations:
          memory: 250m

  process_rapid_nodes:
    <<: *worker
    command: ["process_rapid_nodes"]

  process_regular_nodes:
    <<: *worker
    command: ["process_regular_nodes"]

  process_deferred_nodes:
    <<: *worker
    command: ["process_deferred_nodes"]

  process_protracted_nodes:
    <<: *worker
    command: ["process_protracted_nodes"]

  run_launches:
    <<: *worker
    command: ["run_launches"]

  set_launches_outputs:
    <<: *worker
    command: ["set_launches_outputs"]

  set_launches_errors:
    <<: *worker
    command: ["set_launches_errors"]

  update_users_balance:
    <<: *worker
    command: ["update_users_balance"]

  record_pipelines_usage:
    <<: *worker
    command: ["record_pipelines_usage"]

  update_packages:
    <<: *worker
    command: ["update_packages"]

  chrome:
    <<: *piper
    networks:
      - monitoring
      - database
      - services
    command: ["chrome"]
    healthcheck:
      test: curl --fail http://localhost:9222/json/version || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  periodic:
    <<: *piper
    networks:
      - monitoring
      - database
    command: ["periodic"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m

  sockets:
    <<: *piper
    networks:
      - monitoring
      - database
      - ingress
    command: ["sockets"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.sockets.entrypoints=http"
        - "traefik.http.routers.sockets.rule=Host(`${DOMAIN}`) && PathPrefix(`/socket.io/`)"
        - "traefik.http.services.sockets.loadbalancer.server.port=80"
        - "traefik.docker.network=piper_ingress"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m

  oauth:
    <<: *piper
    networks:
      - database
      - ingress
    command: ["oauth"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.oauth.entrypoints=http"
        - "traefik.http.routers.oauth.rule=Host(`${DOMAIN}`) && PathPrefix(`/oauth/`)"
        - "traefik.http.routers.oauth.middlewares=piper-oauth-strip"
        - "traefik.http.middlewares.piper-oauth-strip.stripprefix.prefixes=/oauth"
        - "traefik.http.services.oauth.loadbalancer.server.port=80"
        - "traefik.docker.network=piper_ingress"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 250m

  metrics:
    <<: *piper
    networks:
      - monitoring
      - database
    command: ["metrics"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "prometheus-port=80"
        - "prometheus-job=piper"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 250m
