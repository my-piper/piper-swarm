---

x-piper: &piper
  image: registry.gitlab.com/generative-core/piper/fullstack:${PIPER_IMAGE_TAG}
  env_file:
    - ../config/piper.env
  volumes:
    - storage-data:/app/storage

volumes:
  chrome-share:
  storage-data:
  packages:

networks:
  backend:
    driver: overlay
  database:
    driver: overlay

services:
  backend:
    <<: *piper
    networks:
      - monitoring
      - database
      - ingress
    healthcheck:
      test: curl --fail http://localhost/health || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.entrypoints=http"
        - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`)"
        - "traefik.http.services.backend.loadbalancer.server.port=80"
        - "traefik.docker.network=piper_ingress"
      resources:
        reservations:
          memory: 250m

  worker:
    <<: *piper
    networks:
      - monitoring
      - database
      - services
    volumes:
      - chrome-share:/tmp/share
      - packages:/app/packages
    working_dir: /app/backend
    command: ["npm", "run", "worker"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "prometheus-port=5555"
        - "prometheus-job=piper-worker"
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m
      replicas: 8
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  chrome:
    <<: *piper
    networks:
      - monitoring
      - database
      - services
    volumes:
      - chrome-share:/tmp/share
    working_dir: /app/backend
    command: ["npm", "run", "chrome"]
    healthcheck:
      test: curl --fail http://localhost:9222/json/version || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "prometheus-port=5555"
        - "prometheus-job=piper-chrome"
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  periodic:
    <<: *piper
    networks:
      - monitoring
      - database
    volumes:
      - chrome-share:/tmp/share
    working_dir: /app/backend
    command: ["npm", "run", "periodic"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m

  sockets:
    <<: *piper
    networks:
      - monitoring
      - database
      - ingress
    working_dir: /app/backend
    command: ["npm", "run", "sockets"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.sockets.entrypoints=http"
        - "traefik.http.routers.sockets.rule=Host(`${DOMAIN}`) && PathPrefix(`/socket.io/`)"
        - "traefik.http.services.sockets.loadbalancer.server.port=80"
        - "traefik.docker.network=piper_ingress"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m
