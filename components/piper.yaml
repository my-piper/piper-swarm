---

x-piper: &piper
  image: ghcr.io/my-piper/piper:${PIPER_IMAGE_TAG}
  env_file:
    - ../config/piper.env

x-worker-deploy: &worker-deploy
  placement:
      constraints:
        - "node.labels.piper-worker==true"
  resources:
    limits:
      memory: 4g
    reservations:
      memory: 200m
  replicas: 1
  update_config:
    parallelism: 1
    delay: 5s
    order: start-first

x-worker: &worker
  <<: *piper
  networks:
    - monitoring
    - database
    - services
  deploy:
    <<: *worker-deploy

networks:
  backend:
    driver: overlay
  database:
    driver: overlay

services:
  backend:
    <<: *piper
    networks:
      - monitoring
      - database
      - ingress
    healthcheck:
      test: curl --fail http://localhost/health || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    command: ["server"]
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.entrypoints=http"
        - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`)"
        - "traefik.http.routers.backend.middlewares=security-headers,remove-headers"
        - "traefik.http.services.backend.loadbalancer.server.port=80"
        - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
        - "traefik.http.middlewares.security-headers.headers.sslRedirect=true"
        - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
        - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
        - "traefik.http.middlewares.security-headers.headers.contentSecurityPolicy=default-src 'self'; img-src 'self' https: data:; media-src 'self' https: data:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com;"
        - "traefik.http.middlewares.security-headers.headers.referrerPolicy=same-origin"
        - "traefik.http.middlewares.security-headers.headers.permissionsPolicy=camera=(), microphone=()"
        - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
        - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
        - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
        - "traefik.http.middlewares.remove-headers.headers.customResponseHeaders.Server="
        - "traefik.http.middlewares.remove-headers.headers.customResponseHeaders.X-Powered-By="
        - "traefik.docker.network=piper_ingress"
      resources:
        reservations:
          memory: 250m

  process_rapid_nodes:
    <<: *worker
    command: ["process_rapid_nodes"]
    deploy:
      <<: *worker-deploy
      replicas: ${PROCESS_RAPID_NODES_REPLICAS:-1}

  process_regular_nodes:
    <<: *worker
    command: ["process_regular_nodes"]
    deploy:
      <<: *worker-deploy
      replicas: ${PROCESS_REGULAR_NODES_REPLICAS:-1}

  process_deferred_nodes:
    <<: *worker
    command: ["process_deferred_nodes"]
    deploy:
      <<: *worker-deploy
      replicas: ${PROCESS_DEFERRED_NODES_REPLICAS:-1}

  process_protracted_nodes:
    <<: *worker
    command: ["process_protracted_nodes"]
    deploy:
      <<: *worker-deploy
      replicas: ${PROCESS_PROTRACTED_NODES_REPLICAS:-1}

  run_launches:
    <<: *worker
    command: ["run_launches"]
    deploy:
      <<: *worker-deploy
      replicas: ${RUN_LAUNCHES_REPLICAS:-1}

  set_launches_io:
    <<: *worker
    command: ["set_launches_io"]
    deploy:
      <<: *worker-deploy
      replicas: ${SET_LAUNCHES_IO_REPLICAS:-1}

  update_users_balance:
    <<: *worker
    command: ["update_users_balance"]
    deploy:
      <<: *worker-deploy
      replicas: ${UPDATE_USERS_BALANCE_REPLICAS:-1}

  record_pipelines_usage:
    <<: *worker
    command: ["record_pipelines_usage"]
    deploy:
      <<: *worker-deploy
      replicas: ${RECORD_PIPELINES_USAGE_REPLICAS:-1}

  update_packages:
    <<: *worker
    command: ["update_packages"]
    deploy:
      <<: *worker-deploy
      replicas: ${UPDATE_PACKAGES_REPLICAS:-1}

  chrome:
    <<: *piper
    networks:
      - monitoring
      - database
      - services
    command: ["chrome"]
    healthcheck:
      test: curl --fail http://localhost:9222/json/version || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    deploy:
      endpoint_mode: dnsrr
      placement:
        constraints:
          -  "node.role==manager"
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  periodic:
    <<: *piper
    networks:
      - monitoring
      - database
    command: ["periodic"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m

  sockets:
    <<: *piper
    networks:
      - monitoring
      - database
      - ingress
    command: ["sockets"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.sockets.entrypoints=http"
        - "traefik.http.routers.sockets.rule=Host(`${DOMAIN}`) && PathPrefix(`/socket.io/`)"
        - "traefik.http.services.sockets.loadbalancer.server.port=80"
        - "traefik.docker.network=piper_ingress"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 4g
        reservations:
          memory: 250m

  oauth:
    <<: *piper
    networks:
      - database
      - ingress
    command: ["oauth"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.oauth.entrypoints=http"
        - "traefik.http.routers.oauth.rule=Host(`${DOMAIN}`) && PathPrefix(`/oauth/`)"
        - "traefik.http.routers.oauth.middlewares=piper-oauth-strip"
        - "traefik.http.middlewares.piper-oauth-strip.stripprefix.prefixes=/oauth"
        - "traefik.http.services.oauth.loadbalancer.server.port=80"
        - "traefik.docker.network=piper_ingress"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 250m

  metrics:
    <<: *piper
    networks:
      - monitoring
      - database
    command: ["metrics"]
    deploy:
      placement:
        constraints:
          -  "node.role==manager"
      labels:
        - "prometheus-port=80"
        - "prometheus-job=piper"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 250m
