---

x-piper: &piper
  image: registry.gitlab.com/generative-core/piper/fullstack:${PIPER_IMAGE_TAG}
  env_file:
    - ./config/piper.env
  volumes:
    - storage-data:/app/storage
  
volumes:
  mongo-data:
  redis-data:
  kafka-data:
  chrome-share:
  clickhouse-data:
  clickhouse-logs:
  storage-data:
  gpt4free-cookies:
  gpt4free-images:
  prometheus-data:
  vmagent-data:

networks:
  monitoring:
    driver: overlay
  backend:
    driver: overlay
  database:
    driver: overlay
  ingress:
    driver: overlay

services:
  backend:
    <<: *piper
    networks:
      - monitoring
      - database   
      - ingress
    healthcheck:
      test: curl --fail http://localhost/health || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  worker:
    <<: *piper
    networks:
      - monitoring
      - database
    volumes:
      - chrome-share:/tmp/share
    working_dir: /app/backend
    command: ["npm", "run", "worker"]
    healthcheck:
      test: curl --fail http://localhost:5555/metrics || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    deploy:
      labels:
        - "prometheus-port=5555"
        - "prometheus-job=piper-worker"
      resources:
        limits:
          memory: 4G
      replicas: 8
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  chrome:
    <<: *piper
    networks:
      - monitoring
      - database   
    volumes:
      - chrome-share:/tmp/share
    working_dir: /app/backend
    command: ["npm", "run", "chrome"]
    healthcheck:
      test: curl --fail http://localhost:9222/json/version || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    deploy:
      labels:
        - "prometheus-port=5555"
        - "prometheus-job=piper-chrome"
      resources:
        limits:
          memory: 4G
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  periodic:
    <<: *piper
    networks:
      - monitoring
      - database
    volumes:
      - chrome-share:/tmp/share
    working_dir: /app/backend
    command: ["npm", "run", "periodic"]
    deploy:
      replicas: 0
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  sockets:
    <<: *piper
    networks:
      - monitoring
      - database
      - ingress
    working_dir: /app/backend
    command: ["npm", "run", "sockets"]
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first

  mongo:
    image: mongo:7.0.11
    networks:
      - database
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"

  redis:
    image: redis/redis-stack:7.2.0-v11
    networks:
      - database
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"

  clickhouse:
    image: clickhouse/clickhouse-server:24.8.4
    networks:
      - database
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - clickhouse-logs:/val/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    networks:
      - database
    volumes:
      - kafka-data:/var/lib/kafka/data
    env_file:
      - config/kafka/kafka.env.config

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    networks:
      - database
    depends_on:
      - kafka
    ports:
      - "4444:8080"
    env_file:
      - config/kafka/ui.env.config

  nginx:
    image: nginx:1.25.2
    networks:
      - ingress
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/proxy_params:/etc/nginx/proxy_params:ro
      - storage-data:/var/www/storage:ro
    ports:
      - "80:80"
    healthcheck:
      test: service nginx status || exit 1
      interval: 2s
      retries: 10
      start_period: 5s
      timeout: 5s

  imgproxy:
    image: darthsim/imgproxy:v3.18.2
    networks:
      - ingress
    environment:
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/data
    volumes:
      - storage-data:/data/storage:ro

  gpt4free:
    image: hlohaus789/g4f
    volumes:
      - gpt4free-cookies:/app/har_and_cookies
      - gpt4free-images:/app/generated_images

  # -- monitoring --

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./config/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers
    env_file:
      - config/promtail/config.env
    command:
      [
        "-config.file=/etc/promtail/config.yml",
        "-config.expand-env=true"
      ]
    deploy:
      mode: global

  vmagent:
    image: victoriametrics/vmagent:v1.104.0
    env_file:
      - ./config/metrics/config.env
    networks:
      - monitoring
    volumes:
      - ./config/metrics/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - vmagent-data:/vmagentdata
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
      - "-envflag.enable"
      - "-envflag.prefix=VM_"
    
  exporter-node:
    image: quay.io/prometheus/node-exporter:v1.6.1
    networks:
      - monitoring
    volumes:
      - /:/host:ro,rslave
    command:
      - "--path.rootfs=/host"
      - "--collector.filesystem.mount-points-exclude=^/(etc|boot|run|dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($$|/)"
    deploy:
      mode: global
      labels:
        - "prometheus-job=node"
        - "prometheus-port=9100"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    networks:
      - monitoring
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    command:
      - '-docker_only'
    deploy:
      mode: global
      labels:
         - "prometheus-port=8080"
         - "prometheus-job=cadvisor"

  exporter-redis:
    image: oliver006/redis_exporter:v1.54.0
    networks:
      - monitoring
      - database
    environment:
      - REDIS_ADDR=redis:6379
    deploy:
      labels:
        - "prometheus-port=9121"
        - "prometheus-job=redis"
      
  exporter-kafka:
    image: danielqsj/kafka-exporter:v1.8.0
    command: ["--kafka.server=kafka:9092"]
    networks:
      - database
      - monitoring
    deploy:
      labels:
        - "prometheus-job=kafka"
        - "prometheus-port=9308"

  exporter-mongo:
    image: percona/mongodb_exporter:0.41.2
    command:
      - "--mongodb.uri=mongodb://mongo:27017"
      - "--compatible-mode"
      - "--discovering-mode"
      - "--collect-all"
    networks:
      - database
      - monitoring
    deploy:
      labels:
        - "prometheus-job=mongo"
        - "prometheus-port=9216"
